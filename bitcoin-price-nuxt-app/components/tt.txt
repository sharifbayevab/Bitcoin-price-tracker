<template>
  <div>
    <HeaderComponent />
    <SettingsComponent @settingsChange="updatePieChartSettings" />
    <client-only>
      <nuxt-plotly
        :data="xy_data"
        :layout="layout"
        :config="config"
        style="width: 100%"
      ></nuxt-plotly>
    </client-only>
  </div>
</template>

<script lang="ts">
  /* __placeholder__ */
import type {
    NuxtPlotlyConfig,
    NuxtPlotlyData,
    NuxtPlotlyLayout,
    NuxtPlotlyHTMLElement,
} from 'nuxt-plotly';
import axios from 'axios';
import { reactive } from 'vue';
import HeaderComponent from './components/HeaderComponent.vue';
import SettingsComponent from './components/SettingsComponent.vue';

// const x = [1, 2, 3, 4, 5];
// const y = [10, 20, 30, 20, 10];
const xy_data: NuxtPlotlyData = [
    { x: [2], y: [3], type: 'scatter', mode: 'markers', marker: { size: 20 } },
  ];
const layout: NuxtPlotlyLayout = {
    title: 'My graph on app.vue with <client-only>',
  };
  
const config: NuxtPlotlyConfig = { scrollZoom: true, displayModeBar: false };
  

export default {
  components: {
    HeaderComponent,
    SettingsComponent
  },

  data() {
  return {
    pieChartSettings: {
      selectedPeriod: 'day',
      startDate: null,
      endDate: '2015-01-01',
      customInterval: 1,
    }
  };
},

  mounted() {
    this.fetchBitcoinPrices();
  },
  methods: {
    updatePieChartSettings(settings: any) {
      console.log('Updated pie chart settings:', settings);
      this.pieChartSettings = settings;
      this.fetchBitcoinPrices();
    },
    async fetchBitcoinPrices() {

      const baseUrl = 'http://localhost:3001/api/bitcoin-prices';
      const { startDate, endDate } = this.pieChartSettings;

      const queryParams = new URLSearchParams();
      if (startDate) {
        queryParams.append('startDate', startDate);
      }
      if (endDate) {
        queryParams.append('endDate', endDate);
      }

      const urlWithParams = `${baseUrl}?${queryParams.toString()}`;
      console.log('url', urlWithParams);


      try {
        const response = await axios.get(urlWithParams);
        // xy_data = this.transformData(response.data);
        const x = response.data.map((item: { date: any; }) => transformUTCDateToLocal(item.date));
        const y = response.data.map((item: { price: any; }) => item.price);
        xy_data[0].x = x;
        xy_data[0].y = y;
        console.log('chartSettings.data');
      } catch (error) {
        console.error('Error fetching bitcoin prices:', error);
      }
    },
    
    transformData(data: any) {
      const x = data.map((item: { date: any; }) => transformUTCDateToLocal(item.date));
      const y = data.map((item: { price: any; }) => item.price);
      return [{ x: x, y: y, type: 'scatter', mode: 'markers', marker: { size: 2 } }];
    }
  },

  watch: {
    pieChartSettings: {
      deep: true,
      handler() {
        this.fetchBitcoinPrices();
      }
    }
  }
  
};

function transformUTCDateToLocal(utcDateStr: string | number | Date) {
    const date = new Date(utcDateStr);
    const year = date.getFullYear();
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const day = date.getDate().toString().padStart(2, '0');

    return `${year}-${month}-${day}`;
}
</script>
